trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageRepository: 'claimstatusapi'
  tag: '$(Build.BuildId)'
  acrServiceConnection: 'sc-acr-claimstatusapi-3' # ACR service connection name
  acrLoginServer: 'acrclaimstatusapicnalv2intro2b3.azurecr.io'
  armServiceConnection: 'sc-claimstatusapi-3' # Azure Resource Manager service connection name
  resourceGroupName: 'rg-cnalv2-introspect2b-test-3'
  containerAppName: 'claimstatusapi'

resources:
  repositories:
    - repository: self
      type: github
      name: chrisabbotthauxwell/claim-status-api
      ref: main
      endpoint: 'sc-github-chrisabbotthauxwell' # Github service connection name

steps:
  - checkout: self

  - task: Docker@2
    displayName: 'Build Docker image'
    inputs:
      containerRegistry: '$(acrServiceConnection)'
      repository: '$(imageRepository)'
      command: build
      Dockerfile: 'src/ClaimStatusAPI/Dockerfile'
      buildContext: 'src/ClaimStatusAPI'
      tags: |
        $(tag)
        latest

  - task: Docker@2
    displayName: 'Push Docker image to ACR'
    inputs:
      containerRegistry: '$(acrServiceConnection)'
      repository: '$(imageRepository)'
      command: push
      tags: |
        $(tag)
        latest

  # Scan image with Trivy and fail on HIGH/CRITICAL
  - script: |
      set -euo pipefail
      echo "Scanning image $(acrLoginServer)/$(imageRepository):$(tag) with Trivy (JSON output)"
      # ensure working dir is mounted so container can write output
      docker run --rm \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v "$(System.DefaultWorkingDirectory):/work" \
        aquasec/trivy:latest \
        image --format json -o /work/trivy-result.json --severity HIGH,CRITICAL "$(acrLoginServer)/$(imageRepository):$(tag)"

      # count HIGH/CRITICAL vulns
      vuln_count=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH" or .Severity=="CRITICAL")] | length' trivy-result.json)

      if [ "$vuln_count" -gt 0 ]; then
        echo "Found $vuln_count HIGH/CRITICAL vulnerabilities"
        # collect first few vuln ids/messages for failure message
        details=$(jq -r '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH" or .Severity=="CRITICAL") | {pkg:.PkgName, vuln:.VulnerabilityID, severity:.Severity}] | .[:5]' trivy-result.json | jq -c .)
        printf '<?xml version="1.0" encoding="UTF-8"?>\n<testsuites>\n  <testsuite name="TrivyScan" tests="1" failures="1">\n    <testcase classname="Trivy" name="HighOrCriticalVulnerabilities">\n      <failure message="%s">%</failure>\n    </testcase>\n  </testsuite>\n</testsuites>\n' "$vuln_count" > trivy-junit.xml
      else
        echo "No HIGH/CRITICAL vulnerabilities found"
        printf '<?xml version="1.0" encoding="UTF-8"?>\n<testsuites>\n  <testsuite name="TrivyScan" tests="1" failures="0">\n    <testcase classname="Trivy" name="NoHighOrCriticalVulnerabilities"/>\n  </testsuite>\n</testsuites>\n' > trivy-junit.xml
      fi
    displayName: 'Scan image (Trivy) -> produce JSON + JUnit'
    workingDirectory: '$(System.DefaultWorkingDirectory)'

  - task: PublishTestResults@2
    displayName: 'Publish Trivy scan results (JUnit)'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(System.DefaultWorkingDirectory)/trivy-junit.xml'
      failTaskOnFailedTests: true
      testRunTitle: 'Trivy vulnerability scan'

  - task: AzureCLI@2
    displayName: 'Set OpenAI secrets and deploy image to ACA'
    env:
      AZURE_OPENAI_KEY: $(AZURE_OPENAI_KEY)
      AZURE_OPENAI_ENDPOINT: $(AZURE_OPENAI_ENDPOINT)
      OPENAI_MODEL: $(OPENAI_MODEL)
    inputs:
      azureSubscription: '$(armServiceConnection)'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        set -euo pipefail

        # ensure containerapp extension is present
        az extension show -n containerapp >/dev/null 2>&1 || az extension add --name containerapp

        model="${OPENAI_MODEL:-gpt-4o-mini}"
        echo "Using OPENAI_MODEL=$model"

        # store secrets on the Container App (secret names must be lowercase/hyphen)
        az containerapp secret set \
          --name "$(containerAppName)" \
          --resource-group "$(resourceGroupName)" \
          --secrets azure-openai-key="$AZURE_OPENAI_KEY" azure-openai-endpoint="$AZURE_OPENAI_ENDPOINT"

        # set environment variables on the Container App; use @secret-name to reference stored secret
        az containerapp update \
          --name "$(containerAppName)" \
          --resource-group "$(resourceGroupName)" \
          --set-env-vars AZURE_OPENAI_KEY=secretref:azure-openai-key AZURE_OPENAI_ENDPOINT=secretref:azure-openai-endpoint OPENAI_MODEL=${model}

        # update image (this triggers a restart so the new secrets/env take effect)
        az containerapp update \
          --name "$(containerAppName)" \
          --resource-group "$(resourceGroupName)" \
          --image "$(acrLoginServer)/$(imageRepository):$(tag)"